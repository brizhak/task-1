{"mappings":"uDAEA,IAAIA,ECFJC,EAAiBC,KAAKC,MAAM,8gB,IDe5BC,EAXgBC,OAAOC,SAAEA,EAAQC,UAAEA,MACjC,MAAMC,KAAEA,EAAIC,MAAEA,GAAUH,EACxB,YAA+BI,IAA3BC,EAAAV,GAAMO,GAAMD,IACdK,MAAM,yCACC,OAEPZ,EAASW,EAAAV,GAAMO,GAAMD,GAAaE,EAC3B,CAAED,KAAMD,EAAWE,MAAOT,EAAOa,QAAQ,I,MEPpDC,EAJmB,CAACC,EAAUT,EAAUG,EAAOO,EAAUR,KACvDO,EAASE,YAAc,MAAMX,KAAYU,KAAYP,KAASD,GAAM,ECGtE,MAAMU,EAAWC,SAASC,eAAe,UACnCC,EAASF,SAASC,eAAe,mBAElB,MACnB,MAAME,EAAUH,SAASI,iBAAiB,UAC1C,IAAK,IAAIf,KAAQG,EAAAV,GAAO,CACtB,MAAMuB,EAASL,SAASM,cAAc,UACtCD,EAAOf,MAAQD,EACfgB,EAAOP,YAAcT,EACrBc,EAAQI,SAAQC,GAAUA,EAAOC,IAAIJ,EAAOK,WAAU,K,GAI1DC,GA6BAT,EAAOU,iBAAiB,UA3BP1B,MAAM2B,IAGrB,IAAIC,EAFJD,EAAEE,iBAIF,MAAM5B,EAAWa,SAASC,eAAe,YAAYX,MAC/CO,EAAWG,SAASC,eAAe,YAAYX,MAC/C0B,EAAShB,SAASC,eAAe,UAAUX,MAWjD,GATIO,IAAamB,EACfvB,MAAM,yCAENqB,QAAa7B,EAAQ,CACnBE,SAAU,CAAEE,KAAMQ,EAAUP,MAAOH,GACnCC,UAAW4B,IAIXF,QACFrB,MAAM,+BACD,CACL,MAAMJ,KAAEA,EAAIC,MAAEA,GAAUwB,EACxBnB,EAAWI,EAAUZ,EAAUG,EAAOO,EAAUR,GAChDa,EAAOe,O","sources":["src/scripts/convertDistance.js","src/scripts/rules.json","src/scripts/showResult.js","src/index.js"],"sourcesContent":["import rules from './rules.json';\n\nlet result;\n\nconst convert = async ({ distance, convertTo }) => {\n  const { unit, value } = distance;\n  if (rules[unit][convertTo] === undefined) {\n    alert('Select the unit of measure to convert');\n    return null;\n  } else {\n    result = rules[unit][convertTo] * value;\n    return { unit: convertTo, value: result.toFixed(2) };\n  }\n};\n\nexport default convert;\n","{\n  \"km\": {\n    \"m\": 1000,\n    \"cm\": 100000,\n    \"in\": 39370.1,\n    \"ft\": 3280.84,\n    \"mm\": 1000000,\n    \"yd\": 1094\n  },\n  \"m\": {\n    \"cm\": 100,\n    \"in\": 39.37,\n    \"ft\": 3.281,\n    \"km\": 0.001,\n    \"mm\": 1000,\n    \"yd\": 1.094\n  },\n  \"cm\": {\n    \"m\": 0.01,\n    \"in\": 0.3937,\n    \"ft\": 0.0328,\n    \"km\": 0.00001,\n    \"mm\": 10,\n    \"yd\": 0.01094\n  },\n  \"mm\": {\n    \"m\": 0.001,\n    \"cm\": 0.1,\n    \"in\": 0.03937,\n    \"ft\": 0.00328,\n    \"km\": 0.000001,\n    \"yd\": 0.00109\n  },\n  \"in\": {\n    \"m\": 0.0254,\n    \"cm\": 2.54,\n    \"ft\": 0.0833,\n    \"km\": 0.0000254,\n    \"mm\": 25.4,\n    \"yd\": 0.0278\n  },\n  \"ft\": {\n    \"m\": 0.3048,\n    \"cm\": 30.48,\n    \"in\": 12,\n    \"km\": 0.0003048,\n    \"mm\": 304.8,\n    \"yd\": 0.3333\n  },\n  \"yd\": {\n    \"m\": 0.9144,\n    \"cm\": 91.44,\n    \"in\": 36,\n    \"ft\": 3,\n    \"km\": 0.0009144,\n    \"mm\": 914.4\n  }\n}","const showResult = (resultEl, distance, value, fromUnit, unit) => {\n  resultEl.textContent = `At ${distance} ${fromUnit} ${value} ${unit}`;\n};\n\nexport default showResult;\n","import rules from './scripts/rules.json';\nimport convert from './scripts/convertDistance';\nimport showResult from './scripts/showResult';\n\nconst resultEl = document.getElementById('result');\nconst formEl = document.getElementById('conversion-form');\n\nconst renderMarkup = () => {\n  const selects = document.querySelectorAll('select');\n  for (let unit in rules) {\n    const option = document.createElement('option');\n    option.value = unit;\n    option.textContent = unit;\n    selects.forEach(select => select.add(option.cloneNode(true)));\n  }\n};\n\nrenderMarkup();\n\nconst onSubmit = async e => {\n  e.preventDefault();\n\n  let rule;\n\n  const distance = document.getElementById('distance').value;\n  const fromUnit = document.getElementById('fromUnit').value;\n  const toUnit = document.getElementById('toUnit').value;\n\n  if (fromUnit === toUnit) {\n    alert('Select the unit of measure to convert');\n  } else {\n    rule = await convert({\n      distance: { unit: fromUnit, value: distance },\n      convertTo: toUnit,\n    });\n  }\n\n  if (rule === null || rule === undefined) {\n    alert('Invalid unit of measure');\n  } else {\n    const { unit, value } = rule;\n    showResult(resultEl, distance, value, fromUnit, unit);\n    formEl.reset();\n  }\n};\n\nformEl.addEventListener('submit', onSubmit);\n"],"names":["$0cdb9a7e6a403a7c$var$result","$645379f7f08ba830$exports","JSON","parse","$0cdb9a7e6a403a7c$export$2e2bcd8739ae039","async","distance","convertTo","unit","value","undefined","$parcel$interopDefault","alert","toFixed","$3f13fa30544d543b$export$2e2bcd8739ae039","resultEl","fromUnit","textContent","$1f0dc3b9307be026$var$resultEl","document","getElementById","$1f0dc3b9307be026$var$formEl","selects","querySelectorAll","option","createElement","forEach","select","add","cloneNode","$1f0dc3b9307be026$var$renderMarkup","addEventListener","e","rule","preventDefault","toUnit","reset"],"version":3,"file":"index.7b9c23d6.js.map"}